# 복습 로직 AST 설명

## 전체 구조

앱의 복습 로직은 주로 `QuizService`, `AnkiAlgorithm`, `UserProvider`, `ReviewQuizzesProvider`, `QuizUserData` 클래스들로 구성되어 있습니다. 이들 클래스는 사용자 퀴즈 데이터 관리, 복습 일정 계산, UI와의 상호작용 등을 담당하며, 서로 긴밀하게 연동되어 있습니다.

## 클래스 및 메소드 설명

### QuizService

**역할**: 사용자 퀴즈 데이터의 로드, 저장, 동기화 등을 관리하며, Firestore와 로컬 스토리지 간의 데이터 이동을 담당합니다.

**구성 요소**:

- **Fields**:
  - `_firestore`: Firestore 인스턴스.
  - `_logger`: 로깅을 위한 Logger 인스턴스.
  - `_uuid`: UUID 생성을 위한 Uuid 인스턴스.
  - `_cachedSubjects`, `_cachedQuizTypes`, `_cachedQuizzes`: 데이터 캐싱을 위한 맵.
  - `_userQuizData`: 사용자별 퀴즈 데이터 저장 맵.

- **Constructors**:
  - `QuizService._internal()`: 싱글톤 패턴을 위한 내부 생성자.
  - `factory QuizService()`: 싱글톤 인스턴스 반환.

- **Methods**:
  - `loadUserQuizData(String userId)`: 로컬 스토리지에서 사용자 퀴즈 데이터 로드. 없을 경우 Firestore에서 로드.
  - `_loadUserQuizDataFromFirebase(String userId)`: Firestore에서 사용자 데이터 로드.
  - `saveUserQuizData(String userId)`: 사용자 퀴즈 데이터를 로컬 스토리지에 저장.
  - `syncUserData(String userId, Map<String, dynamic> userData)`: 로컬과 Firestore 간 데이터 동기화.
  - `updateUserQuizData(...)`: 사용자 퀴즈 데이터를 업데이트하고 동기화.
  - `resetUserQuizData(...)`: 특정 퀴즈 데이터를 초기화하고 동기화.
  - `getQuizAccuracy(...)`: 특정 퀴즈의 정확도 계산.
  - `getTotalQuizCount(String subjectId, String quizTypeId)`: 특정 과목 및 퀴즈 유형의 총 퀴즈 수 조회.
  - `_convertToQuizUserDataMap(...)`, `_convertFromQuizUserDataMap(...)`: 데이터 변환 메소드.

### AnkiAlgorithm

**역할**: 복습 알고리즘을 구현하여, 다음 복습 날짜 및 간격, 용이성 계수를 계산합니다.

**구성 요소**:

- **Fields**:
  - `initialInterval`, `defaultEaseFactor`, `_minEaseFactor`: 초기 복습 간격, 기본 용이성 계수, 최소 용이성 계수.

- **Static Methods**:
  - `calculateNextReview(...)`: 사용자의 응답을 기반으로 다음 복습 날짜 및 기타 파라미터 계산.
  - `_handleImprovedUnderstanding(...)`: 사용자의 이해도가 향상된 경우 처리.
  - `_handleIncorrectAnswer(...)`: 오답 처리.
  - `_handleCorrectAnswer(...)`: 정답 처리.
  - `_calculateNewInterval(...)`: 새로운 복습 간격 계산.
  - `_calculateNewEaseFactor(...)`: 새로운 용이성 계수 계산.
  - `evaluateRecallQuality(...)`: 회상 품질 평가.
  - `calculateNextReviewDate(...)`: 주어진 간격과 배수를 기반으로 다음 복습 날짜 계산.

### UserProvider

**역할**: 사용자 상태 관리, 퀴즈 데이터 업데이트, 복습 목록 관리 등을 담당합니다.

**구성 요소**:

- **Fields**:
  - `_user`: 현재 로그인된 사용자.
  - `_logger`: 로깅을 위한 Logger 인스턴스.
  - `_authService`: 인증 서비스 인스턴스.
  - `_quizService`: 퀴즈 서비스 인스턴스.
  - `_reviewPeriodMultiplier`: 사용자 설정 복습 주기 배수.

- **Constructors**:
  - `UserProvider()`: 초기 데이터 로드 및 설정.

- **Getters**:
  - `reviewPeriodMultiplier`, `user`, `isAdmin`.

- **Setters**:
  - `setReviewPeriodMultiplier(double value)`.

- **Methods**:
  - `setUser(User? user)`: 사용자 설정 및 데이터 로드.
  - `_loadUserData()`: 사용자 데이터 로드.
  - `isUserLoggedIn()`: 로그인 상태 확인.
  - `signInWithEmailAndPassword(...)`, `signInWithApple()`, `signOut()`: 인증 관련 메소드.
  - `updateUserQuizData(...)`: 사용자 퀴즈 데이터 업데이트 및 동기화.
  - `addToReviewList(...)`, `removeFromReviewList(...)`: 복습 목록에 퀴즈 추가/제거.
  - `isInReviewList(...)`: 퀴즈가 복습 목록에 있는지 확인.
  - `getNextReviewDate(...)`: 다음 복습 날짜 조회.
  - `formatNextReviewDate(...)`: 다음 복습 날짜 포맷팅.
  - `getUserQuizData()`: 사용자 퀴즈 데이터 조회.
  - `syncUserData()`, `syncUserQuizData()`: 데이터 동기화.
  - `resetUserAnswers(...)`: 사용자 퀴즈 답변 초기화.
  - `getQuizAccuracy(...)`: 퀴즈 정확도 조회.
  - `_formatTimeDifference(...)`: 시간 차이 포맷팅.

### ReviewQuizzesProvider

**역할**: 복습 대상 퀴즈 로드 및 관리, 복습 진행 상황 추적 등을 담당합니다.

**구성 요소**:

- **Fields**:
  - `_quizService`, `_logger`, `userId`: 의존성 및 사용자 ID.
  - `_selectedSubjectId`, `_quizzesForReview`, `_isLoading`, `_completedQuizIds`, `_isAllQuizzesCompleted`, `_subjects`, `_initialTotalQuizzesPerSubject`, `_currentTotalQuizzesPerSubject`, `_lastResetDate`: 상태 관리 변수들.

- **Constructors**:
  - `ReviewQuizzesProvider(...)`: 초기 데이터 로드.

- **Getters**:
  - `selectedSubjectId`, `quizzesForReview`, `isLoading`, `completedQuizIds`, `isAllQuizzesCompleted`, `subjects`, `initialTotalQuizzes`.

- **Methods**:
  - `setSelectedSubjectId(String? subjectId)`: 과목 선택 설정.
  - `loadSubjects()`: 과목 목록 로드.
  - `_loadInitialTotalQuizzes()`, `_saveInitialTotalQuizzes()`, `_resetInitialTotalQuizzes()`: 초기 퀴즈 수 관리.
  - `_isSameDay(...)`: 날짜 비교.
  - `loadQuizzesForReview()`: 복습 퀴즈 로드.
  - `_loadCompletedQuizIds()`, `_saveCompletedQuizIds()`: 완료된 퀴즈 ID 관리.
  - `addCompletedQuizId(String quizId)`: 완료된 퀴즈 ID 추가.
  - `getSubjectName(String? subjectId)`: 과목 이름 조회.
  - `removeQuizFromReview(String quizId)`: 복습 목록에서 퀴즈 제거 및 동기화.
  - `getReviewProgress(String subjectId)`: 복습 진행 상황 조회.
  - `_checkAllQuizzesCompleted()`: 모든 퀴즈 완료 여부 확인.
  - `updateCurrentTotalQuizzes(...)`: 현재 퀴즈 총수 업데이트.

### QuizUserData

**역할**: 각 퀴즈에 대한 사용자 데이터를 모델링합니다.

**구성 요소**:

- **Fields**:
  - `correct`, `total`, `accuracy`, `interval`, `easeFactor`, `consecutiveCorrect`, `nextReviewDate`, `mistakeCount`, `lastAnswered`, `selectedOptionIndex`, `isUnderstandingImproved`, `markedForReview`, `reviewPeriodMultiplier`.

- **Constructors**:
  - `QuizUserData({...})`: 데이터 초기화.

- **Methods**:
  - `toJson()`: JSON 변환.
  - `factory QuizUserData.fromJson(Map<String, dynamic> json)`: JSON에서 객체 생성.

## 데이터 흐름 및 상호 작용

### 1. 복습 시작: Toggle 버튼 클릭

- **사용자 행동**: 사용자가 퀴즈 카드의 토글 버튼을 클릭하여 복습 상태를 변경.

- **동작 과정**:
  1. `QuizCard` 위젯의 `_toggleReviewStatus` 메소드 호출.
  2. 해당 메소드에서 `UserProvider`의 `removeFromReviewList` 또는 `addToReviewList` 메소드 호출.
     - **제거 시**:
       - `removeFromReviewList`가 호출되어 `QuizService`의 `removeFromReviewList` 메소드 실행.
       - Firestore와 로컬 스토리지에서 해당 퀴즈 제거 및 데이터 초기화.
       - `syncUserData`를 통해 데이터 동기화.
     - **추가 시**:
       - `addToReviewList`가 호출되어 `QuizService`의 `addToReviewList` 메소드 실행.
       - Firestore와 로컬 스토리지에 해당 퀴즈 추가.
       - `syncUserData`를 통해 데이터 동기화.
  3. `AnkiAlgorithm`을 통해 다음 복습 날짜 및 간격 계산.
  4. `QuizUserData`가 업데이트되어 새로운 복습 스케줄 저장.
  5. UI에 스낵바로 상태 메시지 표시 및 상태 업데이트.

### 2. 복습 산정 로직

- **복습 계산**:
  - `AnkiAlgorithm`의 `calculateNextReview` 메소드가 호출되어 사용자의 응답에 따라 다음 복습 날짜를 계산.
  - 응답이 정답인지, 오답인지, 이해도가 향상되었는지에 따라 간격과 용이성 계수를 조정.
  - 계산된 값은 `QuizUserData`에 저장되고, `QuizService`를 통해 로컬 및 Firestore에 반영.

- **데이터 이동**:
  - 사용자의 응답 데이터는 `QuizService`를 통해 `QuizUserData`에 저장.
  - `UserProvider`가 `QuizService`를 통해 데이터를 관리하며, 필요 시 동기화.
  - `ReviewQuizzesProvider`는 `QuizService`를 통해 복습할 퀴즈 목록을 로드하고 관리.

### 3. 복습 진행 상황 표시: 차트 렌더링

- **위젯**: `ReviewProgressChart`

- **동작 과정**:
  1. `ReviewQuizzesProvider`에서 현재 선택된 과목의 복습 진행 데이터를 조회.
     - 총 퀴즈 수와 완료된 퀴즈 수를 가져옴.
  2. `PieChart`를 사용하여 진행률을 시각적으로 표시.
     - 완료된 퀴즈는 파란색으로, 남은 퀴즈는 회색으로 표시.
     - 센터에는 진행률 퍼센트와 완료된/총 퀴즈 수 텍스트 표시.
  3. `Legend`를 통해 색상과 의미를 설명.
  4. UI는 `ThemeProvider`를 통해 다크 모드 등 테마에 맞게 색상이 조정됨.

### 4. 차트 상세 설명

- **구성 요소**:
  - **PieChart**:
    - `PieChartData`를 통해 섹션 데이터 설정.
    - `sectionsSpace`: 섹션 간 간격 설정.
    - `centerSpaceRadius`: 센터 공간 반경 설정.
    - `sections`: 완료된 퀴즈와 남은 퀴즈 데이터를 기반으로 섹션 생성.
  - **중앙 텍스트**:
    - 진행률 퍼센트와 완료된/총 퀴즈 수를 표시.
  - **Legend**:
    - 완료된 퀴즈와 남은 퀴즈의 색상과 설명을 표시.

- **데이터 흐름**:
  1. `ReviewQuizzesProvider`에서 `getReviewProgress` 메소드 호출.
  2. 현재 선택된 과목의 총 퀴즈 수와 완료된 퀴즈 수를 반환.
  3. `ReviewProgressChart`에서 이 데이터를 기반으로 차트 데이터 구성.
  4. 차트가 갱신되며 UI에 반영.

## 로그 추적

각 클래스와 메소드에는 `_logger` 인스턴스를 사용하여 중요한 이벤트와 상태 변화를 기록합니다. 이는 다음과 같은 이점을 제공합니다:

- **디버깅**: 문제 발생 시 로그를 통해 원인 파악 용이.
- **유지보수**: 로직의 흐름과 데이터 이동 과정을 추적하여 코드 수정 시 안정성 확보.
- **모니터링**: 사용자 행동과 시스템 반응을 실시간으로 모니터링 가능.

## 최적화 제안

1. **중복 코드 제거**:
   - `UserProvider`와 `ReviewQuizzesProvider`에서 데이터 동기화 메소드가 중복적으로 호출되고 있습니다. 이를 `QuizService` 내 공통 메소드로 통합하여 중복을 줄일 수 있습니다.

2. **캐싱 최적화**:
   - `QuizService`의 캐시 구조가 복잡하고 깊이가 있습니다. 캐시 관리 로직을 단순화하거나 별도의 캐시 관리 클래스를 도입하여 성능을 향상시킬 수 있습니다.

3. **의존성 주입 활용**:
   - 현재 서비스 클래스들이 직접 인스턴스를 생성하고 있습니다. 의존성 주입(DI)을 도입하여 테스트 용이성과 유연성을 높일 수 있습니다.

4. **로깅 개선**:
   - 로깅 레벨 설정이 코드 내에 하드코딩되어 있습니다. 중앙 집중식 로깅 관리자를 도입하여 로깅 설정을 일원화하고, 로깅 메시지를 표준화할 수 있습니다.

5. **비동기 처리 일관성**:
   - 여러 비동기 메소드에서 예외 처리가 일관되지 않을 수 있습니다. 공통된 예외 처리 패턴을 도입하여 코드의 일관성과 안정성을 높일 수 있습니다.

## 결론

현재 앱의 복습 로직은 여러 서비스와 제공자 클래스를 통해 잘 구조화되어 있으며, 사용자 경험을 향상시키는 다양한 기능을 제공합니다. 다만, 중복 코드 제거, 캐시 관리 최적화, 의존성 주입 도입 등을 통해 성능과 유지보수성을 더욱 개선할 수 있습니다. 또한, 로깅과 데이터 흐름 관리의 일관성을 높여 디버깅과 모니터링을 용이하게 하는 것이 중요합니다.